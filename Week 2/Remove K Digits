Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:

    The length of num is less than 10002 and will be â‰¥ k.
    The given num does not contain any leading zero.

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.


class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        stack=[]
        ele=k
        for i in num:
            while ele and stack and stack[-1]>i:
                stack.pop()
                ele-=1
            stack.append(i)
        res="".join(stack[0:len(num)-k])
        print(res)
        res=res.lstrip('0')
        print(res)
        if len(res):
            return res
        else:
            return '0'
        
        #My Solution
#         print(list(num))
#         print(sorted(list(num)))
#         l=list(num)
#         m=l
#         print(len(l))
#         for i in range(len(l)):
#             print(i)
#             if (l[i]!=0 and k!=0):
#                 print(i)
#                 m.remove(l[i])
#                 k-=1
#             elif(l[i]==0 and k!=0):
#                 pass
#             else:
#                 break
            
#             # if (l[i]==0 and k!=0):
#             #     pass
#             # elif(l[i]!=0 and k!=0):
#             #     m.remove(l[i])
#             #     k-=1
#             # else:
#             #     break
        # print(m)
                
