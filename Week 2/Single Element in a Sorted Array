You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

 

Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2

Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10

 

Note: Your solution should run in O(log n) time and O(1) space.

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        l=0
        h=len(nums)-1
        while l<h:
            m=l+(h-l)//2
            halves_are_even_or_odd=(h-m)%2==0
            if nums[m+1]==nums[m]:
                if halves_are_even_or_odd:
                    l=m+2
                else:
                    h=m-1
            elif nums[m-1]==nums[m]:
                if halves_are_even_or_odd:
                    h=m-2
                else:
                    l=m+1
            else:
                return nums[m]
        return nums[l]
                
        
        
        
        
        
        
        #My Solution
        # d={}
        # for i in range(len(nums)):
        #     if nums[i] in d:
        #         d[nums[i]]+=1
        #     else:
        #         d[nums[i]]=1
        # print(min(d.keys(min(d.values())))
        # if len(nums)==0:
        #     return
        # p=nums[0]
        # for i in range(1,len(nums)):
        #     if p!=nums[i]:
        #         return i
